{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartJS","register","ArcElement","Tooltip","Legend","App","useState","counter","setCounter","moodData","setMoodData","snapShotData","setSnapShotData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","groupedData","setGroupedData","useEffect","setTimeout","fetch","then","result","a","json","slice","performGroupData","catch","err","console","error","loadMoreTimeLineDataHandler","forEach","d","mood","toLowerCase","Grid","container","style","padding","item","xs","lg","sx","mb","Alert","severity","role","aria-label","Card","mt","options","maintainAspectRatio","height","Table","TableHead","TableRow","TableCell","TableBody","textAlign","Timeline","position","map","r","TimelineItem","TimelineSeparator","TimelineDot","className","TimelineConnector","TimelineContent","Typography","variant","format","timestamp","Button","onClick","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.412f79c6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Button from '@mui/material/Button';\r\nimport \"./App.css\";\r\nimport { Grid, Alert, Card, Container, Table, TableBody, TableCell, TableHead, TableRow, Typography } from '@mui/material';\r\nimport { Timeline, TimelineItem, TimelineSeparator, TimelineDot, TimelineContent, TimelineConnector } from '@mui/lab'\r\nimport { PieChart, Pie, Sector, Cell, ResponsiveContainer } from 'recharts';\r\nimport Moment from 'react-moment';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\n\r\nfunction App() {\r\n  const __MAX__ = 10;\r\n  const [counter, setCounter] = useState(20);\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [snapShotData, setSnapShotData] = useState([]);\r\n  const [groupedData, setGroupedData] = useState({\r\n    labels: ['Sad', 'Happy', 'Okay', 'Other Moods'],\r\n    datasets: [\r\n      {\r\n        label: 'Mood',\r\n        data: [0, 0, 0, 0],\r\n        backgroundColor: [\r\n          'rgba(255, 99, 132, 0.2)',\r\n          'rgba(75, 192, 192, 0.2)',\r\n          'rgba(153, 102, 255, 0.2)',\r\n          'rgba(255, 159, 64, 0.2)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(255, 99, 132, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(153, 102, 255, 1)',\r\n          'rgba(255, 159, 64, 1)',\r\n        ],\r\n        borderWidth: 0.5,\r\n      },\r\n    ],\r\n  });\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n    fetch('/api').then(async (result) => {\r\n      const data = await result.json();\r\n      setMoodData(data.data);\r\n      setSnapShotData(data.data.slice(0, __MAX__));\r\n      performGroupData(data.data);\r\n    }).catch(err => console.error(err));\r\n    });\r\n  },[]);\r\n\r\n  const loadMoreTimeLineDataHandler = async () => {\r\n    setSnapShotData(moodData.slice(0, counter));\r\n    setCounter(counter + __MAX__);\r\n  }\r\n\r\n  const performGroupData = async (data: any) => {\r\n    setGroupedData({\r\n      ...groupedData, datasets: [\r\n        {\r\n          ...groupedData.datasets[0],\r\n          data: [0,\r\n          0,\r\n          0,\r\n          0]\r\n        }\r\n      ]\r\n    })\r\n    data.forEach((d: any) => {\r\n      switch (d.mood.toLowerCase()) {\r\n        case 'sad':\r\n          setGroupedData({\r\n            ...groupedData, datasets: [\r\n              {\r\n                ...groupedData.datasets[0],\r\n                data: [groupedData.datasets[0].data[0]++,\r\n                groupedData.datasets[0].data[1],\r\n                groupedData.datasets[0].data[2],\r\n                groupedData.datasets[0].data[3]]\r\n              }\r\n            ]\r\n          })\r\n          break;\r\n        case 'happy':\r\n          setGroupedData({\r\n            ...groupedData, datasets: [\r\n              {\r\n                ...groupedData.datasets[0],\r\n                data: [groupedData.datasets[0].data[0],\r\n                groupedData.datasets[0].data[1]++,\r\n                groupedData.datasets[0].data[2],\r\n                groupedData.datasets[0].data[3]]\r\n              }\r\n            ]\r\n          })\r\n          break;\r\n        case 'okay':\r\n          setGroupedData({\r\n            ...groupedData, datasets: [\r\n              {\r\n                ...groupedData.datasets[0],\r\n                data: [groupedData.datasets[0].data[0],\r\n                groupedData.datasets[0].data[1],\r\n                groupedData.datasets[0].data[2]++,\r\n                groupedData.datasets[0].data[3]]\r\n              }\r\n            ]\r\n          })\r\n          break;\r\n        default:\r\n          setGroupedData({\r\n            ...groupedData, datasets: [\r\n              {\r\n                ...groupedData.datasets[0],\r\n                data: [groupedData.datasets[0].data[0],\r\n                groupedData.datasets[0].data[1],\r\n                groupedData.datasets[0].data[2],\r\n                groupedData.datasets[0].data[3]++]\r\n              }\r\n            ]\r\n          })\r\n          break;\r\n      }\r\n    });\r\n    \r\n  }\r\n  return <Grid container style={{ padding: '3rem' }}>\r\n    <Grid item xs={12} >\r\n      <Grid item lg={6} sx={{ mb: 3 }} >\r\n        <Alert severity=\"success\">Hello <span role=\"img\" aria-label=\"smiley\">🥰</span> and welcome!!!</Alert>\r\n      </Grid>\r\n\r\n    </Grid>\r\n    <Grid item xs={12} >\r\n      <Grid item lg={6} sx={{ mb: 3 }} >\r\n        <Alert severity=\"info\">Welcome to Birdie 🐦 mood observation dashboard, this will help you visualize {'Bob'}'s mood</Alert>\r\n      </Grid>\r\n    </Grid>\r\n    <Grid item lg={6} xs={12}><Card   sx={{mb:3, mt:3}}>\r\n        <Doughnut data={groupedData} options={{maintainAspectRatio: false}} height={300}/>\r\n          </Card></Grid>\r\n    <Grid item lg={6} xs={12}>\r\n      <Card sx={{mb:3, mt:3}}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><h5>Mood</h5></TableCell>\r\n              <TableCell><h5>Frequency</h5></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>Sad</TableCell>\r\n              <TableCell>{groupedData.datasets[0].data[0]}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Happy</TableCell>\r\n              <TableCell>{groupedData.datasets[0].data[1]}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Okay</TableCell>\r\n              <TableCell>{groupedData.datasets[0].data[2]}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Other Moods</TableCell>\r\n              <TableCell>{groupedData.datasets[0].data[3]}</TableCell>\r\n            </TableRow></TableBody>\r\n        </Table>\r\n      </Card>\r\n    </Grid>\r\n    <Grid item style={{textAlign:'center'}} xs={12}>\r\n      <h3>Timeline</h3>\r\n      <Timeline position=\"alternate\">\r\n        {\r\n          snapShotData.map((r: any) => (\r\n            <TimelineItem>\r\n              <TimelineSeparator>\r\n                <TimelineDot className={ r.mood.toLowerCase() === \"happy\"\r\n                  ? \"MuiCustom  MuiCustomHappy\" : r.mood.toLowerCase() === \"sad\"\r\n                    ? \"MuiCustom  MuiCustomSad\" : r.mood.toLowerCase() === \"okay\"\r\n                      ? \"MuiCustom  MuiCustomOkay\" : \"MuiCustom  MuiCustomAny\"} />\r\n                <TimelineConnector />\r\n              </TimelineSeparator>\r\n              <TimelineContent>\r\n                <div>\r\n                <Typography variant=\"h6\">{r.mood.toLowerCase()}</Typography>\r\n                  <Typography variant=\"caption\"><Moment format=\"YYYY/MM/DD hh:mm a\">{r.timestamp}</Moment></Typography>\r\n                </div>\r\n              </TimelineContent>\r\n            </TimelineItem>\r\n          ))\r\n        }\r\n      </Timeline>\r\n    </Grid>\r\n\r\n    <Grid item xs={12} style={{textAlign:'center'}}>\r\n      <Button variant=\"contained\" onClick={(e) => loadMoreTimeLineDataHandler()} >Load More</Button>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}