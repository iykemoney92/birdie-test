"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEventTypes = exports.findEventByRecipientIdAndDate = exports.findByRecipientIdAndDate = exports.findEventByRecipientId = exports.findByRecipientId = exports.findAll = void 0;
const db_1 = require("../db");
const findAll = (callback) => {
    const queryString = `SELECT * FROM events  ORDER BY timestamp DESC`;
    db_1.db.query(queryString, (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const events = [];
        rows.forEach((row) => {
            events.push({
                id: row.id,
                timestamp: row.timestamp,
                event_type: row.event_type,
                caregiver_id: row.caregiver_id,
                visit_id: row.visit_id,
                payload: row.payload,
                care_recipient_id: row.care_recipient,
            });
        });
        callback(null, events);
    });
};
exports.findAll = findAll;
const findByRecipientId = (recipientId, callback) => {
    const queryString = `SELECT * FROM events WHERE care_recipient_id = ? ORDER BY timestamp DESC`;
    db_1.db.query(queryString, recipientId, (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const events = [];
        rows.forEach((row) => {
            events.push({
                id: row.id,
                timestamp: row.timestamp,
                event_type: row.event_type,
                caregiver_id: row.caregiver_id,
                visit_id: row.visit_id,
                payload: row.payload,
                care_recipient_id: row.care_recipient,
            });
        });
        callback(null, events);
    });
};
exports.findByRecipientId = findByRecipientId;
const findEventByRecipientId = (recipientId, eventId, callback) => {
    const queryString = `SELECT * FROM events WHERE care_recipient_id = ? AND event_type=?  ORDER BY timestamp DESC`;
    db_1.db.query(queryString, [recipientId, eventId], (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const events = [];
        rows.forEach((row) => {
            events.push({
                id: row.id,
                timestamp: row.timestamp,
                event_type: row.event_type,
                caregiver_id: row.caregiver_id,
                visit_id: row.visit_id,
                payload: row.payload,
                care_recipient_id: row.care_recipient,
            });
        });
        callback(null, events);
    });
};
exports.findEventByRecipientId = findEventByRecipientId;
const findByRecipientIdAndDate = (recipientId, from, to, callback) => {
    const queryString = `SELECT * FROM events WHERE care_recipient_id = ?
  AND (timestamp BETWEEN ? AND ?)  ORDER BY timestamp DESC`;
    db_1.db.query(queryString, [recipientId, from, to], (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const events = [];
        rows.forEach((row) => {
            events.push({
                id: row.id,
                timestamp: row.timestamp,
                event_type: row.event_type,
                caregiver_id: row.caregiver_id,
                visit_id: row.visit_id,
                payload: row.payload,
                care_recipient_id: row.care_recipient,
            });
        });
        callback(null, events);
    });
};
exports.findByRecipientIdAndDate = findByRecipientIdAndDate;
const findEventByRecipientIdAndDate = (recipientId, eventId, from, to, callback) => {
    const queryString = `SELECT * FROM events WHERE care_recipient_id = ?
  AND event_type=?
  AND (timestamp BETWEEN ? AND ?)  ORDER BY timestamp DESC`;
    db_1.db.query(queryString, [recipientId, eventId, from, to], (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const events = [];
        rows.forEach((row) => {
            events.push({
                id: row.id,
                timestamp: row.timestamp,
                event_type: row.event_type,
                caregiver_id: row.caregiver_id,
                visit_id: row.visit_id,
                payload: row.payload,
                care_recipient_id: row.care_recipient,
            });
        });
        callback(null, events);
    });
};
exports.findEventByRecipientIdAndDate = findEventByRecipientIdAndDate;
const getEventTypes = (callback) => {
    const queryString = "SELECT DISTINCT event_type FROM events";
    db_1.db.query(queryString, (err, result) => {
        if (err) {
            callback(err);
        }
        const rows = result;
        const results = [];
        rows.forEach((row) => {
            results.push(row);
        });
        callback(null, results);
    });
};
exports.getEventTypes = getEventTypes;
//# sourceMappingURL=data:application/json;base64,